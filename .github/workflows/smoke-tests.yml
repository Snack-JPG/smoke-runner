name: Smoke Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run smoke tests daily at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      base_url:
        description: 'Base URL to test (optional, defaults to preview URL)'
        required: false
        type: string
      route_limit:
        description: 'Limit number of routes to test'
        required: false
        default: '10'
        type: string

env:
  SMOKE_CONCURRENCY: 2
  TIMEOUT: 45000
  RETRIES: 2

jobs:
  smoke-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    services:
      # Optional: if you need a database for seeding
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Get Vercel preview URL
        id: preview-url
        if: github.event_name == 'pull_request'
        uses: zentered/vercel-preview-url@v1.1.9
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        with:
          vercel_project_id: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Setup environment variables
        run: |
          echo "BASE_URL=${{ github.event.inputs.base_url || steps.preview-url.outputs.preview_url || 'https://your-production-app.vercel.app' }}" >> $GITHUB_ENV
          echo "ROUTE_LIMIT=${{ github.event.inputs.route_limit || '10' }}" >> $GITHUB_ENV
          echo "AUTH_MODE=none" >> $GITHUB_ENV
          echo "VISUAL=false" >> $GITHUB_ENV

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps chromium

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.14.x

      - name: Wait for deployment
        if: steps.preview-url.outputs.preview_url
        run: |
          echo "Waiting for deployment to be ready: ${{ steps.preview-url.outputs.preview_url }}"
          npx wait-on ${{ steps.preview-url.outputs.preview_url }} --timeout 300000

      - name: Seed test data (optional)
        run: |
          if [ -f "./scripts/seedTestData.ts" ]; then
            echo "Seeding test data..."
            pnpm exec tsx scripts/seedTestData.ts seed
          else
            echo "No seed script found, skipping test data setup"
          fi
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          API_KEY: ${{ secrets.API_KEY }}

      - name: Run smoke tests
        run: pnpm smoke:test
        env:
          BASE_URL: ${{ env.BASE_URL }}
          ROUTE_LIMIT: ${{ env.ROUTE_LIMIT }}
          AUTH_MODE: ${{ env.AUTH_MODE }}
          AUTH_COOKIE: ${{ secrets.AUTH_COOKIE }}
          MAGIC_LINK_PATH: ${{ secrets.MAGIC_LINK_PATH }}

      - name: Run Lighthouse CI
        run: pnpm smoke:lhci
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Generate AI proposals
        run: pnpm ai:propose
        if: always()

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: smoke-test-results
          path: |
            playwright-report/
            test-results/
            .cache/
            smoke-report.md
            proposals/
          retention-days: 7

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      - name: Comment PR with results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            let reportContent = 'Smoke test completed!';
            const reportPath = './smoke-report.md';
            
            if (fs.existsSync(reportPath)) {
              reportContent = fs.readFileSync(reportPath, 'utf8');
            }
            
            const reportUrl = `${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`;
            const comment = `## ðŸ”¥ Smoke Test Results
            
            **Test URL**: \`${{ env.BASE_URL }}\`
            **Report**: [View detailed results](${reportUrl})
            
            ${reportContent.substring(0, 3000)}
            
            ${reportContent.length > 3000 ? '... (truncated)' : ''}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Send Slack notification
        if: always() && env.SMOKE_SLACK_WEBHOOK
        run: |
          STATUS="${{ job.status }}"
          COLOR="good"
          if [ "$STATUS" = "failure" ]; then
            COLOR="danger"
          elif [ "$STATUS" = "cancelled" ]; then
            COLOR="warning"
          fi
          
          curl -X POST -H 'Content-type: application/json' \
            --data "{
              \"text\": \"Smoke Tests $STATUS\",
              \"color\": \"$COLOR\",
              \"fields\": [
                {\"title\": \"URL\", \"value\": \"$BASE_URL\", \"short\": true},
                {\"title\": \"Commit\", \"value\": \"${{ github.sha }}\", \"short\": true}
              ]
            }" \
            ${{ secrets.SMOKE_SLACK_WEBHOOK }}
        env:
          SMOKE_SLACK_WEBHOOK: ${{ secrets.SMOKE_SLACK_WEBHOOK }}

      - name: Cleanup test data (optional)
        if: always()
        run: |
          if [ -f "./scripts/seedTestData.ts" ]; then
            echo "Cleaning up test data..."
            pnpm exec tsx scripts/seedTestData.ts cleanup || echo "Cleanup failed, continuing..."
          fi
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          API_KEY: ${{ secrets.API_KEY }}